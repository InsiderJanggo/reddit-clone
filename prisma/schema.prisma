generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(cuid())
  userId String
  providerType String
  providerId String
  providerAccountId String
  refreshToken String?
  accessToken String?
  accessTokenExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  userId String
  expires DateTime
  sessionToken String @unique
  accessToken String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subreddits Subreddit[]
  posts Post[]
  accounts Account[]
  sessions Session[]
}

model Subreddit {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  posts Post[]
  name String @unique
  description String?
  image String?
  parther Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(cuid())
  subredditId String?
  subreddit Subreddit? @relation(fields: [subredditId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  title String @unique
  content String?
  embed String?
  upvoted Int @default(0)
  downvoted Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationRequest {
  id String @id @default(cuid())
  identifier String
  token String @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([identifier, token])
}